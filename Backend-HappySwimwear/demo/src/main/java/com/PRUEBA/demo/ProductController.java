package com.PRUEBA.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller
@RequestMapping(path="/productos")
public class ProductController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepository productRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody Product addNewProduct (@RequestBody Product product
            /*@RequestParam Integer id_usuario, @RequestParam String nombre
            , @RequestParam String correo, @RequestParam String direccion, @RequestParam String telefono,
                                            @RequestParam Integer compras, @RequestParam String contrasena*/) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        /*User newUser = new User();
        newUser.setNombre(user.getNombre());
        newUser.setCorreo(user.getCorreo());
        newUser.setDireccion(user.getDireccion());
        newUser.setTelefono(user.getTelefono());
        newUser.setCompras(user.getCompras());
        newUser.setContrasena(user.getContrasena());
        userRepository.save(newUser);*/
        return productRepository.save(product);
    }

    @GetMapping(path="/all") //MUESTRA TODOS LOS PRODUCTOS
    public @ResponseBody Iterable<Product> getAllUsers() {
        // This returns a JSON or XML with the users
        return productRepository.findAll();
    }

    @PutMapping(path = "/update/{id}") //Actualizar registro
    public @ResponseBody String updateProduct(@PathVariable int id, @RequestBody Product product){
        Product nuevo = new Product();
        nuevo = productRepository.findById(id);
        //nuevo.setId_producto(product.getId_producto());
        nuevo.setNombre_producto(product.getNombre_producto());
        nuevo.setDescripcion(product.getDescripcion());
        nuevo.setPrecio(product.getPrecio());
        nuevo.setId_categoria(product.getId_categoria());
        productRepository.save(nuevo);
        return "Producto "+productRepository.findById(id)+" Se ha actualizado al usuario";
    }


    @GetMapping( path="/producto/{id}" ) //MUESTRA SOLO UN PRODUCTO
    public @ResponseBody Product getProduct(@PathVariable int id )
    {
        return productRepository.findById( id );
    }

    @DeleteMapping( "/producto/{id}" ) //ELIMINA UN PRODUCTO
    public @ResponseBody String deleteProduct(@PathVariable Integer id )
    {
        productRepository.deleteById( id );
        return "usuario "+productRepository.findById(id)+" Se ha borrado al usuario";
    }
}
